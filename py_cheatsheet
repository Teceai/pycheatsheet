type(var)

# Without packages this stuff works this way (with numbers that will work the same way, without numpy for ex.)
In: 'ab' + 'cd'
Out: 'abcd'

# That's how you mix string with integers or floats
savings = 100
result = 100 * 1.10 ** 7
print("I started with $" + str(savings) + " and now have $" + str(result) + ". Awesome!")

### FUNCTIONS ###
enumerate()

# string methods
.upper()
.count()

# list methods
.index()
.count()
.append()
.reverse()
.remove()

# Install package and import it for work
python3 get-pip.py 
pip3 install numpy
import numpy as np
from numpy import array

# numpy package
import numpy as np
np.array() 
np.array(array[array with some condition])
np.corrcoef()
np.logical_and()
np.logical_or()
np.logical_not()

#attribute of np.array
.shape()

### PLOTS ###

import matplotlib.pyplot as plt
plt.plot(x,y)
plt.scatter(x,y)
plt.hist(x, bins=n)
plt.show()
#cleans it up again so you can start afresh
plt.clf()
# Put the x-axis on a logarithmic scale
plt.xscale('log')

# customize plot
# Basic scatter plot, log scale
plt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)
plt.xscale('log') 
# Strings
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')
plt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])
plt.text(1550, 71, 'India')
plt.grid(True)
# After customizing, display the plot
plt.show()

### DICTIONARIES ###

world = {"afghanistan" :30.55, "albania":2.77, "algeria":39.21}
"sealand" in world
.keys()
# to add smth into dict
world['italy'] = 33.33
# Dictionariception
europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
           'france': { 'capital':'paris', 'population':66.03 },
           'germany': { 'capital':'berlin', 'population':80.62 },
           'norway': { 'capital':'oslo', 'population':5.084 } }

### PANDAS ###
import pandas as pd
pd.DataFrame(dictionary)
.index()
pd.read_csv("path/to/brics.csv", index_col = 0)

# loc and iloc
# Row access brics.loc[["RU", "IN", "CH"]]
# Column access brics.loc[:, ["country", "capital"]]
# Row & Column access brics.loc[["RU", "IN", "CH"], ["country", "capital"]]
# Same but with numpers .iloc[[]]

### IF ###
if condition :
 expression
elif condition :
 expression
else :
 expression
 
 ### WHILE ###
 while condition : 
  expression
  
### FOR ###
for var in seq : 
  expression
  
#functions
enumerate(seq)
# dictionary:
 dictionary.items()
# numpy array:
 np.nditer(array)

brics[brics["area"] > 8] 
brics[np.logical_and(brics["area"] > 8, brics["area"] < 10)] 

# for dataframes
for lab, row in datafr.iterrows()
